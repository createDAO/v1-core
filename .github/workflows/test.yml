name: Test Smart Contracts

on:
  pull_request:
    branches: [ main, master ]
  pull_request_target:  # This ensures it runs when PR is merged
    branches: [ main, master ]
    types: [ closed ]

jobs:
  test:
    # Skip if PR is closed without merging
    if: github.event.pull_request.merged == true || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: Test Reports
      url: ${{ steps.deploy.outputs.production_url }}

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}  # Get PR code
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Create reports directory
      run: mkdir -p reports/data reports/assets/js reports/assets/css reports/assets/img

    - name: Get commit info
      run: |
        echo "{\"hash\": \"$(git rev-parse HEAD)\"," > reports/data/commit-info.json
        echo "\"message\": \"$(git log -1 --pretty=%B)\"," >> reports/data/commit-info.json
        echo "\"author\": \"$(git log -1 --pretty=%an)\"," >> reports/data/commit-info.json
        echo "\"date\": \"$(git log -1 --pretty=%aI)\"}" >> reports/data/commit-info.json

    - name: Run tests and generate reports
      run: |
        # Run coverage first to get test results and coverage
        npx hardhat coverage
        
        # Move coverage report to reports directory
        if [ -d "coverage" ]; then
          mv coverage reports/
        fi
        
        # Run tests to generate gas report
        npx hardhat test
        
        # Process gas report
        node reports/assets/js/gas-report-parser.js

    - name: Publish Reports
      if: success()
      id: deploy
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        # Install Vercel CLI
        npm install -g vercel
        
        # Deploy to Vercel
        if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
          # If PR was merged, deploy to production
          DEPLOY_OUTPUT=$(vercel deploy --token ${VERCEL_TOKEN} --yes --prod)
        else
          # For PR preview, deploy without --prod
          DEPLOY_OUTPUT=$(vercel deploy --token ${VERCEL_TOKEN} --yes)
        fi
        echo "$DEPLOY_OUTPUT"
        
        # Extract URL and set as output
        PRODUCTION_URL=$(echo "$DEPLOY_OUTPUT" | grep "Production\|Preview" | sed 's/.*: \(.*\) .*/\1/')
        echo "production_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT